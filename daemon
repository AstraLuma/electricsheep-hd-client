#!/usr/bin/env ruby
%w(fileutils tempfile pathname optparse uri net/http net/https
net/http/post/multipart openssl zlib json).each{|g| require g}

if Gem.win_platform?
  ENV["PATH"] += ";#{File.expand_path("./git+flam3+ruby/bin")}" if File.exist?("./git+flam3+ruby/bin")
end
@argv = ARGV.dup
@options={}
OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [OPTIONS]"
  opts.on("--server SERVER", "Control server to connect to") {|v| @options["server"] = v.to_s}
  opts.on("--apikey APIKEY", "Your api key") {|v| @options["apikey"] = v}
  opts.on("--debug", "Debug-mode") {|v| @options["debug"] = true}
  opts.on("--no-download", "Do not download movies") {|v| @options["no-download"] = true}
  opts.on("--nice NICENESS",
          "Niceness (Higher values result in lower process priority (default: 19, max: 19))") {|v| @options["nice"] = v}
  opts.on("--experimental-gpu", "Use experimental GPU renderer (Fractorium)") {|v| @options["gpu"] = true}
  opts.on("--insecure", "Ignore ssl certificate") {|v| @options["insecure"] = true}
  
  if Gem.win_platform?  
    opts.on("--gpu-priority", "Set GPU render priority (-2: lowest, 2: highest)") {|v| @options["priority"] = v}
  else
    opts.on("--gpu-priority", "Set GPU render priority (1: lowest, 99: highest)") {|v| @options["priority"] = v}
  end 
end.parse!

unless Gem.win_platform?
  `which flam3-animate` ; raise "Missing flame3-animate. You have to install flam3 first" if $? != 0
  `which git` ; puts "Missing git. Autoupdate wont work. Please install git" if $? != 0
  `which emberrender`; raise "emberanimate not found" if $? != 0 && @options["gpu"]
else
  raise "emberanimate not found in #{ENV["APPDATA"]}\\Fractorium" if @options["gpu"] &&
                                                                    !File.exist?("#{ENV["APPDATA"]}\\Fractorium\\emberrender.exe")
end

file_abosulte = File.expand_path(__FILE__)
@basedir = Pathname.new(file_abosulte).dirname

@options["server"] ||= "https://sheeps.triple6.org"
raise "You need an api key. Please register at #{@options["server"]}/register" if @options["apikey"].nil? && !File.exist?("#{@basedir}/api.key")
@options["apikey"] ||= File.read("#{@basedir}/api.key").strip
@options["debug"] ||= false
@options["no-download"] ||= false
@options["nice"] ||= "19"
$DEBUG = @options["debug"]
NICE=@options["nice"]
@options["gpu"] ||= false
@options["insecure"] ||= false
@options["priority"] ||= -2 if Gem.win_platform?
@options["priority"] ||= 1 if Gem.win_platform?

class HTTPHalt < StandardError; end
class API
  attr_reader :http
  def initialize(options={})
    @server = options[:server]
    @uri = URI.parse(@server)
    @http = Net::HTTP.new(@uri.host, @uri.port)
    @http.use_ssl = true
    @http.ca_file = "#{File.dirname(__FILE__)}/sheeps.crt"
    @http.verify_mode = OpenSSL::SSL::VERIFY_PEER
    @http.verify_mode = OpenSSL::SSL::VERIFY_NONE if options["insecure"]
    @http.verify_depth = 5
    @http.read_timeout = 600
  end

  def get(url)
    uri = @uri + url
    request = Net::HTTP::Get.new(uri.request_uri)
    response = @http.request(request)
    response
  end
end
# Autoupdater
if !ENV["electricsheep-hd-client-updated"]
  ENV["electricsheep-hd-client-updated"] = "true"
  Dir.chdir(@basedir)
  `git pull origin master` unless Gem.win_platform?
  if !ENV["OCRA"]
    exec("ruby #{__FILE__} #{@argv.join(' ')}")
  else
    exec("ocra #{__FILE__} #{@argv.join(' ')}")
  end
  exit
end

LOCKFILE = "daemon.lock"
if File.exist?(LOCKFILE)
  pid = File.read(LOCKFILE).strip.to_i
  if pid == 0
    File.delete(LOCKFILE)
    puts "Broken pid file - start again"
    exit 1
  end

  # Check if pid is still running
  begin
    Process.kill(0, pid)
    # Locked
    raise "daemon is already running as pid: #{pid}"
  rescue Errno::ESRCH
    # Not locked
    File.open(LOCKFILE, "w") { |f| f.write Process.pid }
  end
else
  File.open(LOCKFILE, "w") { |f| f.write Process.pid }
end

@api = API.new({server: @options["server"], insecure: @options["insecure"] })

def request_work
  response = @api.get("api/request_work?apikey=#{@options["apikey"]}&gpu=#{@options["gpu"]}")
  work = JSON.parse(response.body)
  work.each do |w|
    genome_file = "#{@animated_genome_dir}/#{w['sequence']}.flame"
    unless File.exist?(genome_file)
      puts "Downloading #{w['sequence']} ..."
      download_animated_genome(w['sequence'])
    end
    puts "Rendering... #{w['sequence']} Frame #{w['frame']}"
    if @options["gpu"]
      frame = ember_render_frame(genome_file, w["frame"])
    else
      frame = flam3_render_frame(genome_file, w["frame"])
    end
    puts "Uploading... #{w['sequence']} Frame #{w['frame']}"
    upload_frame(frame, w)
  end
end

def download_animated_genome(gid)
  output_file = "#{@animated_genome_dir}/#{gid}.flame"
  response = @api.get("#{@branch}/animated_genomes/#{gid}.flame.gz")
  raise HTTPHalt, "Error in download: #{response.body}" if response.code != "200"
  File.open("#{@animated_genome_dir}/#{gid}.flame.gz", "wb") { |f| f.write(response.body) }
  Zlib::GzipReader.open("#{@animated_genome_dir}/#{gid}.flame.gz") do |gz|
    File.open(output_file, "wb") do |g|
      IO.copy_stream(gz, g)
    end
  end
  File.delete("#{@animated_genome_dir}/#{gid}.flame.gz")
  output_file
end

def ember_render_frame(genome_file, frame)
  genome = {}
  genome["file"] = Pathname.new(genome_file.to_s)
  genome["id"] = genome["file"].basename.sub(/\.flame$/,"")

  concat_name = "#{genome['id']}"
  Dir.mkdir("#{@frame_dir}/#{concat_name}") unless File.exist?("#{@frame_dir}/#{concat_name}")
  if Gem.win_platform?
    emberanimate = "#{ENV["APPDATA"]}/Fractorium/emberanimate"
  else
    emberanimate = "emberanimate"
  end
  system(emberanimate,
          "--in=#{File.expand_path(genome_file)}",
          "--format=jpg",
          "--opencl", # TODO Control with flag
          "--priority=#{@options["priority"]}",
          "--sp",
          "--prefix=../frames/#{concat_name}/",
          "--supersample=2",
          "--frame=#{(frame - 1).to_s}",
          "--isaac_seed=fractorium")
  result = $? # TODO Does it always return 0 ?
  fail "Emberrender exited: #{result.exitstatus}" unless result.success?

  "#{@frame_dir}/#{concat_name}/#{"%03d" % frame.to_s}.jpg"
end

def flam3_render_frame(genome_file, frame)
  genome = {}
  genome["file"] = Pathname.new(genome_file.to_s)
  genome["id"] = genome["file"].basename.sub(/\.flame$/,"")

  concat_name = "#{genome['id']}"
  Dir.mkdir("#{@frame_dir}/#{concat_name}") unless File.exist?("#{@frame_dir}/#{concat_name}")
  ENV["in"] = File.expand_path(genome_file)
  ENV["prefix"]= "#{@frame_dir}/#{concat_name}/"
  ENV["format"] = "jpg"
  ENV["jpeg"] = 95.to_s
  ENV["begin"] = frame.to_s
  ENV["end"] = frame.to_s
  if Gem.win_platform?
    `start /low /b flam3-animate`
  else
    `nice -#{NICE} flam3-animate`
  end
  "#{@frame_dir}/#{concat_name}/#{"%05d" % frame.to_s}.jpg"
end

def upload_frame(frame_file, work_set)
  url = URI.parse(@options["server"] + "/api/upload")
  File.open(frame_file) do |jpg|
    req = Net::HTTP::Post::Multipart.new(url.path,
                                         "file" => UploadIO.new(jpg, "image/jpeg", "image.jpg"),
                                         "apikey" => @options["apikey"],
                                         "work_set" => work_set.to_json,
                                         "branch" => @branch,
                                         "gpu" => @options["gpu"])
    @api.http.verify_mode = OpenSSL::SSL::VERIFY_NONE if @options["insecure"]
    response = @api.http.request(req)
    raise HTTPHalt, "Error in upload: #{response.body}" if response.code != "200"
  end
end

def download_sequence
  response = @api.get("api/request_sequence_list?apikey=#{@options["apikey"]}&gpu=#{@options["gpu"]}")
  if response.code != "200"
    return response.body
  end
  sequences = JSON.parse(response.body)
  wanted = sequences.select{|s| !File.exist?("#{@movie_dir}/#{s}")}.first
  return "Nothing to download" if wanted.nil?
  puts "Downloading #{wanted}..."
  response = @api.get("api/request_sequence?apikey=#{@options["apikey"]}&seq=#{wanted}&gpu=#{@options["gpu"]}")
  File.open("#{@movie_dir}/#{wanted}", "wb") {|f| f.write(response.body)}
  return "OK"
end

loop do
  sleep 1
  begin
    response = @api.get("api/active_season?apikey=#{@options["apikey"]}&gpu=#{@options["gpu"]}")
    raise HTTPHalt, "Error in season: #{response.body}" if response.code != "200"
    @season = JSON.parse(response.body)
  rescue JSON::ParserError, Errno::ECONNREFUSED, Errno::ECONNRESET,
         SocketError, Errno::ETIMEDOUT, HTTPHalt, Net::ReadTimeout,
         Net::OpenTimeout => e
    puts "Error: #{e}"
    sleep 60
    next
  end

  @branch = @season["name"]
  puts "Active season: #{@branch}"
  File.open("#{@basedir}/.active-season", "w") { |f| f.write @season["name"]}
  @branch_dir = "#{@basedir}/branches/#{@branch}"
  @genome_dir = "#{@branch_dir}/genomes"
  @animated_genome_dir = "#{@branch_dir}/animated_genomes"
  @frame_dir = "#{@branch_dir}/frames"
  @movie_dir = "#{@branch_dir}/movies"

  FileUtils.mkdir_p(@genome_dir)
  FileUtils.mkdir_p(@animated_genome_dir)
  FileUtils.mkdir_p(@frame_dir)
  FileUtils.mkdir_p(@movie_dir)

  begin
    unless @options["no-download"]
      puts "Requesting new sequence ..."
      puts download_sequence
    end
    puts "Requesting new work..."
    request_work
    break if ENV["OCRA"]
  rescue JSON::ParserError, Errno::ECONNREFUSED, Errno::ECONNRESET,
         SocketError, Errno::ETIMEDOUT, HTTPHalt, Net::ReadTimeout,
         Net::OpenTimeout => e
    puts "Error: #{e}"
    sleep 60
    next
  end
end
