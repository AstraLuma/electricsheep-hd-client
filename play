#!/usr/bin/env ruby
# This script plays a seasons passed as ARV[0] from a random offset
# If ARGV[0] is not given it reads from .active-season

`which mpv` ; raise "Install mpv (https://mpv.io/) to use this script" if $? != 0
require 'socket'
FIFO = "/tmp/eshd"
INPUTCONF = File.absolute_path(File.dirname(__FILE__) + "/mpv-input.conf")
File.delete(FIFO) if File.exist?(FIFO)
system "mkfifo #{FIFO}"
mpv_args = %W(--input-conf=#{INPUTCONF} --no-input-default-bindings --no-osc -fs --panscan=1 --input-file=#{FIFO} --idle)
ARGV[1] ||= ENV['XSCREENSAVER_WINDOW']
mpv_args << "--wid #{ARGV[1]}" if ARGV[1]

mpv = Thread.new { Thread.current.abort_on_exception=true; system "nice -19 mpv #{mpv_args.join(" ")}" }
ARGV[0] ||= "branches/" + File.read(File.dirname(__FILE__) + "/.active-season") + "/movies/"
frame_dir = ARGV[0]
season = File.basename(frame_dir)
Dir.chdir(frame_dir)

@parts = []
Dir.glob("electricsheep*.webm").sort.each do |seq|
  seq1 = seq.split("_")[0]
  seq2 = seq.split("_")[1].sub(/\.webm$/,"")
  if seq1 == seq2
    3.times { @parts << seq}
  else
    @parts << seq
  end
end
puts "Got #{@parts.count} parts"
if @parts.count < 1
  fail "No enough completed parts - start the daemon to render some frames"
end

OFFSET = rand(0..(@parts.count))

Thread.new do
  loop do
    sleep 0.5
    unless mpv.status
      exit
    end
  end
end

begin
  loop do
    @parts.rotate(OFFSET).each do |p|
      puts "write " + p
      File.open(FIFO, "ab") { |f| f.write "loadfile #{Dir.pwd}/#{p} append-play\n" }
      sleep 5
    end
  end
ensure
  mpv.kill
  File.delete(FIFO) if File.exist?(FIFO)
end
